/**
 * @file FaultConfig.def
 * @author IR
 * @brief Configure fault checking
 * @version 0.1
 * @date 2021-01-27
 * 
 * @copyright Copyright (c) 2021
 * 
 */

#ifndef __ECU_FAULTCONFIG_DEF__
// @cond
#define __ECU_FAULTCONFIG_DEF__
// @endcond

#include "ECUGlobalConfig.h"
#include "Log.h"
#include "PPhelp.h"
#include "Pins.h"

// TODO: add pins from excel document

/**
 * @brief Defines Pins that should be checked for hard faults
 * 
 * @note The identity calls the function _LogPrebuildString, this is used to notify Pre_Build.py of the string
 * 
 * Unless it is the last entry, this is how to add a new address
 * 
 * X(pin, comparator, value, identity) \
 * 
 * Only the last entry should NOT have a '\'
 * 
 */
#if CONF_ECU_POSITION == BACK_ECU
#define HARD_PIN_FAULTS                                                  \
    X(PINS_BACK_HVD_FAULT, >, 0, _LogPrebuildString("HVD Fault Signal")) \
    X(PINS_BACK_IMD_FAULT, >, 0, _LogPrebuildString("IMD Fault Signal")) \
    X(PINS_BACK_BMS_FAULT, >, 0, _LogPrebuildString("BMS Fault Signal"))
#else
#define HARD_PIN_FAULTS
#endif

/**
 * @brief Defines Pins that should be checked for hard faults
 * 
 * @note The identity calls the function _LogPrebuildString, this is used to notify Pre_Build.py of the string
 * 
 * Unless it is the last entry, this is how to add a new address
 * 
 * X(pin, comparator, value, identity) \
 * 
 * Only the last entry should NOT have a '\'
 * 
 */
#define SOFT_PIN_FAULTS

/**
 * @brief Defines CAN addresses that should be checked for hard faults
 * 
 * @note For documentation purposes, the last parameter is only used to identify what each message is for
 * 
 * Unless it is the last entry, this is how to add a new address
 * 
 * X(CAN address, mask, tag) \
 * 
 * Only the last entry should NOT have a '\'
 * 
 */
#define HARD_FAULT_ADD                \
    X(0x0, 0x4000020120100080, "BMS") \
    X(0x0, 0x0000000000000000, "RMS")

/**
 * @brief Defines CAN addresses that should be checked for soft faults
 * 
 * @note For documentation purposes, the last parameter is only used to identify what each message is for
 * 
 * Unless it is the last entry, this is how to add a new address
 * 
 * X(CAN address, mask, tag) \
 * 
 * Only the last entry should NOT have a '\'
 * 
 */
#define SOFT_FAULT_ADD                                                 \
    X(ADD_MC0_FAULTS, 0x1111111111111111, "Motor Controller 0 Faults") \
    X(ADD_MC1_FAULTS, 0x1111111111111111, "Motor Controller 1 Faults")

/**
 * @brief Defines address bit field identifiers
 * 
 * If a bit on an address has an identifier we will know exactly what fault occurred and can notify it through Log
 * 
 * @note The identity calls the function _LogPrebuildString, this is used to notify Pre_Build.py of the string
 * 
 * Unless it is the last entry, this is how to add a new address
 * 
 * X(CAN address, bitmask, _LogPrebuildString(identity)) \
 * 
 * Only the last entry should NOT have a '\'
 * 
 */
#define ID_FAULT                                                                                                                                            \
    X(ADD_MC0_FAULTS, 0b1000000000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Hardware Gate/Desaturation Fault"))           \
    X(ADD_MC0_FAULTS, 0b0100000000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("HW over-current Fault"))                      \
    X(ADD_MC0_FAULTS, 0b0010000000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Accelerator shorted"))                        \
    X(ADD_MC0_FAULTS, 0b0001000000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Accelerator Open"))                           \
    X(ADD_MC0_FAULTS, 0b0000100000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Current sensor Low"))                         \
    X(ADD_MC0_FAULTS, 0b0000010000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Current sensor High"))                        \
    X(ADD_MC0_FAULTS, 0b0000001000000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Module Tempature Low"))                       \
    X(ADD_MC0_FAULTS, 0b0000000100000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Module Tempature High"))                      \
    X(ADD_MC0_FAULTS, 0b0000000010000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Control PCB Temperature Low"))                \
    X(ADD_MC0_FAULTS, 0b0000000001000000000000000000000000000000000000000000000000000000, _LogPrebuildString("Control PCB Temperature High"))               \
    X(ADD_MC0_FAULTS, 0b0000000000100000000000000000000000000000000000000000000000000000, _LogPrebuildString("Gate Dive PCB Temperature Low"))              \
    X(ADD_MC0_FAULTS, 0b0000000000010000000000000000000000000000000000000000000000000000, _LogPrebuildString("Gate Dive PCB Temperature High"))             \
    X(ADD_MC0_FAULTS, 0b0000000000001000000000000000000000000000000000000000000000000000, _LogPrebuildString("5V Sense Voltage Low"))                       \
    X(ADD_MC0_FAULTS, 0b0000000000000100000000000000000000000000000000000000000000000000, _LogPrebuildString("5V Sense Voltage High"))                      \
    X(ADD_MC0_FAULTS, 0b0000000000000010000000000000000000000000000000000000000000000000, _LogPrebuildString("12V Sense Voltage Low"))                      \
    X(ADD_MC0_FAULTS, 0b0000000000000001000000000000000000000000000000000000000000000000, _LogPrebuildString("12V Sense Voltage High"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000100000000000000000000000000000000000000000000000, _LogPrebuildString("2.5V Sense Voltage Low"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000010000000000000000000000000000000000000000000000, _LogPrebuildString("2.5V Sense Voltage High"))                    \
    X(ADD_MC0_FAULTS, 0b0000000000000000001000000000000000000000000000000000000000000000, _LogPrebuildString("1.5V Sense Voltage Low"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000000100000000000000000000000000000000000000000000, _LogPrebuildString("2.5V Sense Voltage High"))                    \
    X(ADD_MC0_FAULTS, 0b0000000000000000000010000000000000000000000000000000000000000000, _LogPrebuildString("DC Bus Voltage High"))                        \
    X(ADD_MC0_FAULTS, 0b0000000000000000000001000000000000000000000000000000000000000000, _LogPrebuildString("DC Bus Voltage Low"))                         \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000100000000000000000000000000000000000000000, _LogPrebuildString("Precharge Timeout"))                          \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000010000000000000000000000000000000000000000, _LogPrebuildString("Precharge Voltage Failure"))                  \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000001000000000000000000000000000000000000000, _LogPrebuildString("EEPROM Checksum Invalid"))                    \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000100000000000000000000000000000000000000, _LogPrebuildString("EEPROM Data Out of Range"))                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000010000000000000000000000000000000000000, _LogPrebuildString("EEPROM Update Required"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000001000000000000000000000000000000000000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000100000000000000000000000000000000000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000010000000000000000000000000000000000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000001000000000000000000000000000000000, _LogPrebuildString("Brake Shorted"))                              \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000100000000000000000000000000000000, _LogPrebuildString("Brake Open"))                                 \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000010000000000000000000000000000000, _LogPrebuildString("Motor Over-speed Fault"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000001000000000000000000000000000000, _LogPrebuildString("Over-current Fault"))                         \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000100000000000000000000000000000, _LogPrebuildString("Over-voltage Fault"))                         \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000010000000000000000000000000000, _LogPrebuildString("Inverter Over-temperature Fault"))            \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000001000000000000000000000000000, _LogPrebuildString("Accelerator Input Shorted Fault"))            \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000100000000000000000000000000, _LogPrebuildString("Accelerator Input Open Fault"))               \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000010000000000000000000000000, _LogPrebuildString("Direction Command Fault"))                    \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000001000000000000000000000000, _LogPrebuildString("Inverter Response Time-out Fault"))           \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000100000000000000000000000, _LogPrebuildString("Hardware Gate/Desaturation Fault_2"))         \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000010000000000000000000000, _LogPrebuildString("Hardware Over-current Fault_2"))              \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000001000000000000000000000, _LogPrebuildString("Under-voltage Fault"))                        \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000100000000000000000000, _LogPrebuildString("CAN Command Message Lost Fault"))             \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000010000000000000000000, _LogPrebuildString("Motor Over-temperature Fault"))               \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000001000000000000000000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000100000000000000000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000010000000000000000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000001000000000000000, _LogPrebuildString("Brake Input Shorted Fault"))                  \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000100000000000000, _LogPrebuildString("Brake Input Open Fault"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000010000000000000, _LogPrebuildString("Module A Over-temperature Fault7"))           \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000001000000000000, _LogPrebuildString("Module B Over-temperature Fault7"))           \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000100000000000, _LogPrebuildString("Module C Over-temperature Fault7"))           \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000010000000000, _LogPrebuildString("PCB Over-temperature Fault7"))                \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000001000000000, _LogPrebuildString("Gate Drive Board 1 Over-temperature Fault"))  \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000100000000, _LogPrebuildString("Gate Drive Board 2 Over-temperature Fault7")) \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000010000000, _LogPrebuildString("Gate Drive Board 3 Over-temperature Fault7")) \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000001000000, _LogPrebuildString("Current Sensor Fault"))                       \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000000100000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000000010000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000000001000, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000000000100, _LogPrebuildString("Reserved"))                                   \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000000000010, _LogPrebuildString("Resolver Not Connected"))                     \
    X(ADD_MC0_FAULTS, 0b0000000000000000000000000000000000000000000000000000000000000001, _LogPrebuildString("Inverter Discharge Active"))

#endif // __ECU_FAULTCONFIG_DEF__
